{"version":3,"sources":["App.tsx","index.tsx"],"names":["cells","generateEmptyGrid","rows","i","push","Array","from","App","useState","grid","setGrid","running","setRunning","runningRef","useRef","current","runSimulation","useCallback","g","produce","gridCopy","k","neighbors","forEach","x","y","newI","newK","setTimeout","className","onClick","Math","random","style","display","gridTemplateColumns","map","col","key","newGrid","width","height","backgroundColor","undefined","border","ReactDOM","render","document","getElementById"],"mappings":"2KASMA,G,MAAQ,CACZ,EAAE,GAAI,GACN,EAAE,EAAG,GACL,EAAE,EAAG,GACL,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,GAAI,GACL,CAAC,EAAG,GACJ,CAAC,EAAG,KAGAC,EAAoB,WAExB,IADA,IAAMC,EAAO,GACJC,EAAI,EAAGA,EAjBF,EAiBeA,IAC3BD,EAAKE,KAAKC,MAAMC,KAAKD,MAjBT,IAiByB,kBAAM,MAE7C,OAAOH,GAiHMK,EA9GO,WAAO,IAAD,EACFC,oBAAS,WAC/B,OAAOP,OAFiB,mBACnBQ,EADmB,KACbC,EADa,OAKIF,oBAAS,GALb,mBAKnBG,EALmB,KAKVC,EALU,KAMpBC,EAAaC,iBAAOH,GAC1BE,EAAWE,QAAUJ,EACrB,IAAMK,EAAgBC,uBAAY,WAC3BJ,EAAWE,UAGhBL,GAAQ,SAAAQ,GACN,OAAOC,YAAQD,GAAG,SAACE,GACjB,IAD2C,IAAD,WACjCjB,GACP,IAFwC,eAE/BkB,GACP,IAAIC,EAAY,EAEhBtB,EAAMuB,SAAQ,YAAa,IAAD,mBAAVC,EAAU,KAAPC,EAAO,KAClBC,EAAOvB,EAAIqB,EACXG,EAAON,EAAII,EACbC,GAAQ,GAAKA,EA5Cf,GA4CiCC,GAAQ,GAAKA,EA3C9C,IA4CAL,GAAaJ,EAAEQ,GAAMC,OAIrBL,EAAY,GAAKA,EAAY,EAC/BF,EAASjB,GAAGkB,GAAK,EACI,IAAZH,EAAEf,GAAGkB,IAA0B,IAAdC,IAC1BF,EAASjB,GAAGkB,GAAK,IAdZA,EAAI,EAAGA,EArCV,EAqCuBA,IAAM,EAA1BA,IADFlB,EAAI,EAAGA,EArCR,EAqCqBA,IAAM,EAA1BA,SAsBbyB,WAAWZ,EAAe,QACzB,IAEH,OACE,yBAAKa,UAAU,aACb,yBAAKA,UAAU,WACb,4BACEC,QAAS,WACPlB,GAAYD,GACPA,IACHE,EAAWE,SAAU,EACrBC,OAIHL,EAAU,OAAS,SAGtB,4BACEmB,QAAS,WAEP,IADA,IAAM5B,EAAO,GACJC,EAAI,EAAGA,EAhFZ,EAgFyBA,IAC3BD,EAAKE,KACHC,MAAMC,KAAKD,MAjFX,IAiF2B,kBAAO0B,KAAKC,SAAW,GAAM,EAAI,MAGhEtB,EAAQR,KARZ,UAcA,4BACE4B,QAAS,WACPpB,EAAQT,OAFZ,UAQF,yBACEgC,MAAO,CACLC,QAAS,OACTC,oBAAoB,UAAD,OArGb,EAqGa,aApGZ,GAoGY,QAErBN,UAAU,aAETpB,EAAK2B,KAAI,SAAClC,EAAMC,GAAP,OACRD,EAAKkC,KAAI,SAACC,EAAKhB,GAAN,OACP,yBACEiB,IAAG,UAAKnC,EAAL,YAAUkB,GACbS,QAAS,WACP,IAAMS,EAAUpB,YAAQV,GAAM,SAACW,GAC7BA,EAASjB,GAAGkB,GAAKZ,EAAKN,GAAGkB,GAAK,EAAI,KAEpCX,EAAQ6B,IAEVN,MAAO,CACLO,MAnHC,GAoHDC,OApHC,GAqHDC,gBAAiBjC,EAAKN,GAAGkB,GAAK,eAAYsB,EAC1CC,OAAQ,oBAGTzC,EACAkB,YC7HfwB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.3c6572ad.chunk.js","sourcesContent":["import React, { useState, useCallback, useRef } from \"react\";\r\nimport produce from \"immer\";\r\n\r\nimport \"./app.css\";\r\n\r\nconst numRows = 8;\r\nconst numCols = 8;\r\nconst gridSize = 45;\r\n\r\nconst cells = [\r\n  [-1, -1],\r\n  [-1, 0],\r\n  [-1, 1],\r\n  [0, -1],\r\n  [0, 1],\r\n  [1, -1],\r\n  [1, 0],\r\n  [1, 1]\r\n];\r\n\r\nconst generateEmptyGrid = () => {\r\n  const rows = [];\r\n  for (let i = 0; i < numRows; i++) {\r\n    rows.push(Array.from(Array(numCols), () => 0));\r\n  }\r\n  return rows;\r\n};\r\n\r\nconst App: React.FC = () => {\r\n  const [grid, setGrid] = useState(() => {\r\n    return generateEmptyGrid();\r\n  });\r\n\r\n  const [running, setRunning] = useState(false);\r\n  const runningRef = useRef(running);\r\n  runningRef.current = running;\r\n  const runSimulation = useCallback(() => {\r\n    if (!runningRef.current) {\r\n      return;\r\n    }\r\n    setGrid(g => {\r\n      return produce(g, (gridCopy: number[][]) => {\r\n        for (let i = 0; i < numRows; i++) {\r\n          for (let k = 0; k < numCols; k++) {\r\n            let neighbors = 0;\r\n\r\n            cells.forEach(([x, y]) => {\r\n              const newI = i + x;\r\n              const newK = k + y;\r\n              if (newI >= 0 && newI < numRows && newK >= 0 && newK < numCols) {\r\n                neighbors += g[newI][newK];\r\n              }\r\n            });\r\n\r\n            if (neighbors < 2 || neighbors > 3) {\r\n              gridCopy[i][k] = 0;\r\n            } else if (g[i][k] === 0 && neighbors === 3) {\r\n              gridCopy[i][k] = 1;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    });\r\n\r\n    setTimeout(runSimulation, 200);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"buttons\">\r\n        <button\r\n          onClick={() => {\r\n            setRunning(!running);\r\n            if (!running) {\r\n              runningRef.current = true;\r\n              runSimulation();\r\n            }\r\n          }}\r\n        >\r\n          {running ? \"stop\" : \"start\"}\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => {\r\n            const rows = [];\r\n            for (let i = 0; i < numRows; i++) {\r\n              rows.push(\r\n                Array.from(Array(numCols), () => (Math.random() > 0.7 ? 1 : 0))\r\n              );\r\n            }\r\n            setGrid(rows);\r\n          }}\r\n        >\r\n          random\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => {\r\n            setGrid(generateEmptyGrid());\r\n          }}\r\n        >\r\n          clear\r\n        </button>\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"grid\",\r\n          gridTemplateColumns: `repeat(${numCols}, ${gridSize}px)`\r\n        }}\r\n        className=\"cell-grid\"\r\n      >\r\n        {grid.map((rows, i) =>\r\n          rows.map((col, k) => (\r\n            <div\r\n              key={`${i}-${k}`}\r\n              onClick={() => {\r\n                const newGrid = produce(grid, (gridCopy: number[][]) => {\r\n                  gridCopy[i][k] = grid[i][k] ? 0 : 1;\r\n                });\r\n                setGrid(newGrid);\r\n              }}\r\n              style={{\r\n                width: gridSize,\r\n                height: gridSize,\r\n                backgroundColor: grid[i][k] ? \"DimGrey\" : undefined,\r\n                border: \"solid 1px black\"\r\n              }}\r\n            >\r\n              {i}\r\n              {k}\r\n            </div>\r\n          ))\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}